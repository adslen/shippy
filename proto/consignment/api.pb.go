// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/consignment/api.proto

package consignment // import "proto/consignment"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShippingServiceClient is the client API for ShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShippingServiceClient interface {
	// 托运一批货物
	CreateConsignment(ctx context.Context, in *CreateConsignmentRequest, opts ...grpc.CallOption) (*CreateConsignmentResponse, error)
	// 获取货物信息
	GetConsignment(ctx context.Context, in *GetConsignmentRequest, opts ...grpc.CallOption) (*GetConsignmentResponse, error)
	// 展现托运货物
	ListConsignments(ctx context.Context, in *ListConsignmentRequest, opts ...grpc.CallOption) (*ListConsignmentResponse, error)
}

type shippingServiceClient struct {
	cc *grpc.ClientConn
}

func NewShippingServiceClient(cc *grpc.ClientConn) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) CreateConsignment(ctx context.Context, in *CreateConsignmentRequest, opts ...grpc.CallOption) (*CreateConsignmentResponse, error) {
	out := new(CreateConsignmentResponse)
	err := c.cc.Invoke(ctx, "/shippy.consignment.ShippingService/CreateConsignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) GetConsignment(ctx context.Context, in *GetConsignmentRequest, opts ...grpc.CallOption) (*GetConsignmentResponse, error) {
	out := new(GetConsignmentResponse)
	err := c.cc.Invoke(ctx, "/shippy.consignment.ShippingService/GetConsignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) ListConsignments(ctx context.Context, in *ListConsignmentRequest, opts ...grpc.CallOption) (*ListConsignmentResponse, error) {
	out := new(ListConsignmentResponse)
	err := c.cc.Invoke(ctx, "/shippy.consignment.ShippingService/ListConsignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingServiceServer is the server API for ShippingService service.
type ShippingServiceServer interface {
	// 托运一批货物
	CreateConsignment(context.Context, *CreateConsignmentRequest) (*CreateConsignmentResponse, error)
	// 获取货物信息
	GetConsignment(context.Context, *GetConsignmentRequest) (*GetConsignmentResponse, error)
	// 展现托运货物
	ListConsignments(context.Context, *ListConsignmentRequest) (*ListConsignmentResponse, error)
}

func RegisterShippingServiceServer(s *grpc.Server, srv ShippingServiceServer) {
	s.RegisterService(&_ShippingService_serviceDesc, srv)
}

func _ShippingService_CreateConsignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).CreateConsignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippy.consignment.ShippingService/CreateConsignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).CreateConsignment(ctx, req.(*CreateConsignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_GetConsignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetConsignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippy.consignment.ShippingService/GetConsignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetConsignment(ctx, req.(*GetConsignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_ListConsignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).ListConsignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippy.consignment.ShippingService/ListConsignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).ListConsignments(ctx, req.(*ListConsignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShippingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shippy.consignment.ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsignment",
			Handler:    _ShippingService_CreateConsignment_Handler,
		},
		{
			MethodName: "GetConsignment",
			Handler:    _ShippingService_GetConsignment_Handler,
		},
		{
			MethodName: "ListConsignments",
			Handler:    _ShippingService_ListConsignments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consignment/api.proto",
}

// StreamShippingServiceClient is the client API for StreamShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamShippingServiceClient interface {
	List(ctx context.Context, in *ListConsignmentRequest, opts ...grpc.CallOption) (*ListConsignmentResponse, error)
}

type streamShippingServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamShippingServiceClient(cc *grpc.ClientConn) StreamShippingServiceClient {
	return &streamShippingServiceClient{cc}
}

func (c *streamShippingServiceClient) List(ctx context.Context, in *ListConsignmentRequest, opts ...grpc.CallOption) (*ListConsignmentResponse, error) {
	out := new(ListConsignmentResponse)
	err := c.cc.Invoke(ctx, "/shippy.consignment.StreamShippingService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamShippingServiceServer is the server API for StreamShippingService service.
type StreamShippingServiceServer interface {
	List(context.Context, *ListConsignmentRequest) (*ListConsignmentResponse, error)
}

func RegisterStreamShippingServiceServer(s *grpc.Server, srv StreamShippingServiceServer) {
	s.RegisterService(&_StreamShippingService_serviceDesc, srv)
}

func _StreamShippingService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamShippingServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shippy.consignment.StreamShippingService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamShippingServiceServer).List(ctx, req.(*ListConsignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamShippingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shippy.consignment.StreamShippingService",
	HandlerType: (*StreamShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StreamShippingService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/consignment/api.proto",
}

func init() { proto.RegisterFile("proto/consignment/api.proto", fileDescriptor_api_56f2a8920551876c) }

var fileDescriptor_api_56f2a8920551876c = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xce, 0xcf, 0x2b, 0xce, 0x4c, 0xcf, 0xcb, 0x4d, 0xcd, 0x2b, 0xd1, 0x4f, 0x2c,
	0xc8, 0xd4, 0x03, 0x8b, 0x0a, 0x09, 0x15, 0x67, 0x64, 0x16, 0x14, 0x54, 0xea, 0x21, 0xc9, 0x4a,
	0x29, 0x63, 0x6a, 0x40, 0x62, 0x43, 0x34, 0x1a, 0xdd, 0x67, 0xe2, 0xe2, 0x0f, 0x06, 0xe9, 0xcd,
	0xcc, 0x4b, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x2a, 0xe2, 0x12, 0x74, 0x2e, 0x4a,
	0x4d, 0x2c, 0x49, 0x75, 0x46, 0x28, 0x17, 0xd2, 0xd1, 0xc3, 0xb4, 0x42, 0x0f, 0x43, 0x59, 0x50,
	0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x2e, 0x91, 0xaa, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x95, 0x18, 0x84, 0x32, 0xb9, 0xf8, 0xdc, 0x53, 0x4b, 0x90, 0x2d, 0xd4, 0xc4, 0x66, 0x04, 0xaa,
	0x1a, 0x98, 0x6d, 0x5a, 0xc4, 0x28, 0x85, 0x5b, 0x95, 0xcb, 0x25, 0xe0, 0x93, 0x59, 0x8c, 0x2c,
	0x59, 0x2c, 0x84, 0xd5, 0x04, 0x34, 0x55, 0x30, 0xdb, 0xb4, 0x89, 0x52, 0x0b, 0xb3, 0xce, 0xa8,
	0x8a, 0x4b, 0x34, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x17, 0x3d, 0x98, 0x13, 0xb9, 0x58, 0x40, 0xba,
	0x68, 0x68, 0xb7, 0x93, 0x70, 0x94, 0x20, 0x46, 0x22, 0x48, 0x62, 0x03, 0x0b, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x68, 0xd7, 0xa4, 0x9d, 0x51, 0x02, 0x00, 0x00,
}
